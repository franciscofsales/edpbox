# sensor eb1mod: !include modbus-eb1.yaml

  - platform: template
    sensors:

      eb1_clock:
        friendly_name: "EB1 Clock"
        value_template: >-
            {% set hh = states('sensor.eb1_0x0001').split(',')[4] | int %}
            {% set mm = states('sensor.eb1_0x0001').split(',')[5] | int %}
            {% set ss = states('sensor.eb1_0x0001').split(',')[6] | int %}
            {{ '{0:02d}'.format(hh) + ":" + '{0:02d}'.format(mm) + ":" + '{0:02d}'.format(ss) }}
        icon_template: mdi:clock

      eb1_tariff:
        friendly_name: "EB1 Tariff"
        value_template: >-
          {% set x = states('sensor.eb1_0x000b')|string %}
          {% if x == "1" %}
            {{ "V" }}
          {% elif x == "2" %}
            {{ "P" }}
          {% elif x == "3" %}
            {{ "C" }}
          {% endif %}
        icon_template: mdi:calendar

# 6C

      eb1_voltage_l1:
        friendly_name: "EB1 Voltage L1"
        value_template: >-
            {% set x = states('sensor.eb1_0x006c').split(',')[0] | float %}
            {% if x > 0 %}
              {{ x / 10 }}
            {% endif %}
        unit_of_measurement: "V"
        device_class: voltage

      eb1_voltage_l1_10:
        friendly_name: "EB1 Voltage L1-10"
        value_template: >-
            {% set x = states('sensor.eb1_0x006c').split(',')[0] | float %}
            {% if x > 0 %}
              {{ x / 10 - 10 }}
            {% endif %}
        unit_of_measurement: "V"
        device_class: voltage

      eb1_current_l1:
        friendly_name: "EB1 Current L1"
        value_template: >-
            {% set x = states('sensor.eb1_0x006c').split(',')[1] | float %}
            {% if x %}
              {{ x / 10 }}
            {% endif %}
        unit_of_measurement: "A"
        device_class: current

      eb1_voltage_l2:
        friendly_name: "EB1 Voltage L2"
        value_template: >-
            {% set x = states('sensor.eb1_0x006c').split(',')[2] | float %}
            {% if x > 0 %}
              {{ x / 10 }}
            {% endif %}
        unit_of_measurement: "V"
        device_class: voltage

      eb1_current_l2:
        friendly_name: "EB1 Current L2"
        value_template: >-
            {% set x = states('sensor.eb1_0x006c').split(',')[3] | float %}
            {% if x %}
              {{ x / 10 }}
            {% endif %}
        unit_of_measurement: "A"
        device_class: current

      eb1_voltage_l3:
        friendly_name: "EB1 Voltage L3"
        value_template: >-
            {% set x = states('sensor.eb1_0x006c').split(',')[4] | float %}
            {% if x > 0 %}
              {{ x / 10 }}
            {% endif %}
        unit_of_measurement: "V"
        device_class: voltage

      eb1_voltage_l3_10:
        friendly_name: "EB1 Voltage L3+10"
        value_template: >-
            {% set x = states('sensor.eb1_0x006c').split(',')[4] | float %}
            {% if x > 0 %}
              {{ x / 10 + 10 }}
            {% endif %}       
        unit_of_measurement: "V"
        device_class: voltage

      eb1_current_l3:
        friendly_name: "EB1 Current L3"
        value_template: >-
            {% set x = states('sensor.eb1_0x006c').split(',')[5] | float %}
            {% if x %}
              {{ x / 10 }}
            {% endif %}
        unit_of_measurement: "A"
        device_class: current

      eb1_current:
        friendly_name: "EB1 Current"
        value_template: >-
            {% set x = states('sensor.eb1_0x006c').split(',')[6] | float %}
            {% if x %}
              {{ x / 10 }}
            {% endif %}
        unit_of_measurement: "A"
        device_class: current

# 7B
      eb1_power_factor:
        friendly_name: "EB1 Power Factor"
        value_template: >-
            {% set x = states('sensor.eb1_0x007b').split(',')[0] | float %}
            {% if x > 0 %}
              {{ x / 1000 }}
            {% endif %}
        unit_of_measurement: "pu"
        device_class: power_factor

      eb1_power_factor_l1:
        friendly_name: "EB1 Power Factor L1"
        value_template: >-
            {% set x = states('sensor.eb1_0x007b').split(',')[1] | float %}
            {% if x %}
              {{ x / 1000 }}
            {% endif %}
        unit_of_measurement: "pu"
        device_class: power_factor

      eb1_power_factor_l2:
        friendly_name: "EB1 Power Factor L2"
        value_template: >-
            {% set x = states('sensor.eb1_0x007b').split(',')[2] | float %}
            {% if x > 0 %}
              {{ x / 1000 }}
            {% endif %}
        unit_of_measurement: "pu"
        device_class: power_factor

      eb1_power_factor_l3:
        friendly_name: "EB1 Power Factor L3"
        value_template: >-
            {% set x = states('sensor.eb1_0x007b').split(',')[3] | float %}
            {% if x > 0 %}
              {{ x / 1000 }}
            {% endif %}
        unit_of_measurement: "pu"
        device_class: power_factor

      eb1_frequency:
        friendly_name: "EB1 Frequency"
        value_template: >-
            {% set x = states('sensor.eb1_0x007b').split(',')[4] | float %}
            {% if x > 0 %}
              {{ x / 10 }}
            {% endif %}
        unit_of_measurement: "Hz"
        icon_template: mdi:pulse

# 73

      eb1_active_power_l1:
        friendly_name: "EB1 Active Power L1"
        value_template: >-
            {% set x = states('sensor.eb1_0x0073').split(',')[0] | int %}
            {% if x %}
              {{ x }}
            {% endif %}
        unit_of_measurement: "W"
        device_class: power

      eb1_active_power_l2:
        friendly_name: "EB1 Active Power L2"
        value_template: >-
            {% set x = states('sensor.eb1_0x0073').split(',')[2] | int %}
            {% if x %}
              {{ x }}
            {% endif %}
        unit_of_measurement: "W"
        device_class: power

      eb1_active_power_l3:
        friendly_name: "EB1 Active Power L3"
        value_template: >-
            {% set x = states('sensor.eb1_0x0073').split(',')[4] | int %}
            {% if x %}
              {{ x }}
            {% endif %}
        unit_of_measurement: "W"
        device_class: power

      eb1_active_power:
        friendly_name: "EB1 Active Power"
        value_template: >-
            {% set x = states('sensor.eb1_0x0073').split(',')[6] | int %}
            {% if x %}
              {{ x }}
            {% endif %}
        unit_of_measurement: "W"
        device_class: power

# 26

      eb1_total_energy_t1_vazio:
        friendly_name: "EB1 Total Energy T1 Vazio"
        value_template: >-
            {% set x = states('sensor.eb1_0x0026').split(',')[0] | float %}
            {% if x > 0 %}
              {{ x / 1000 }}
            {% endif %}
        unit_of_measurement: "kWh"
        icon_template: mdi:transmission-tower
   
      eb1_total_energy_t2_ponta:
        friendly_name: "EB1 Total Energy T2 Ponta"
        value_template: >-
            {% set x = states('sensor.eb1_0x0026').split(',')[1] | float %}
            {% if x > 0 %}
              {{ x / 1000 }}
            {% endif %}
        unit_of_measurement: "kWh"
        icon_template: mdi:transmission-tower
        
      eb1_total_energy_t3_cheias:
        friendly_name: "EB1 Total Energy T3 Cheias"
        value_template: >-
            {% set x = states('sensor.eb1_0x0026').split(',')[2] | float %}
            {% if x > 0 %}
              {{ x / 1000 }}
            {% endif %}
        unit_of_measurement: "kWh"
        icon_template: mdi:transmission-tower

# 16

      eb1_total_energy_import:
        friendly_name: "EB1 Total Energy Import"
        value_template: >-
            {% set x = states('sensor.eb1_0x0016').split(',')[0] | float %}
            {% if x > 0 %}
              {{ x / 1000 }}
            {% endif %}
        unit_of_measurement: "kWh"
        device_class: energy

      eb1_total_energy_export:
        friendly_name: "EB1 Total Energy Export"
        value_template: >-
            {% set x = states('sensor.eb1_0x0016').split(',')[1] | float %}
            {% if x > 0 %}
              {{ x / 1000 }}
            {% endif %}
        unit_of_measurement: "kWh"
        device_class: energy

# EOF
